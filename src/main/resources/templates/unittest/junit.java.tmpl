import org.junit.*;

public class ${ClassName}Test {
${<if Method.ReturnType.RealNumber}

	static void assertTcFloatEquals(double expected, double actual) {
		double eps = 1e-9;
		if (Double.isNaN(expected) || Double.isNaN(actual)
		    || Math.abs(expected - actual) > eps * Math.max(1.0, Math.abs(expected))) {
			throw new ComparisonFailure(null, String.valueOf(expected), String.valueOf(actual));
		}
	}

${<if Method.ReturnType.Array}
	static void assertTcFloatArrayEquals(double[] expected, double[] actual) {
		new org.junit.internal.ComparisonCriteria() {
			@Override
			protected void assertElementsEqual(Object expected, Object actual) {
				assertTcFloatEquals((Double) expected, (Double) actual);
			}
		}.arrayEquals(null, expected, actual);
	}

${<end}
${<end}
${<foreach Examples e}
	@Test
	public void example${e.Num}()
	{
${<foreach e.Input in}
${<if !in.Param.Type.Array}
		${in.Param.Type.Primitive} ${in.Param.Name} = ${in};
${<else}
		${in.Param.Type.Primitive} ${in.Param.Name}[] = new ${in.Param.Type} {${foreach in.ValueList v ,}
			${v}${end}
		};
${<end}
${<end}
${<if !e.Output.Param.Type.Array}
		${e.Output.Param.Type.Primitive} __expected = ${e.Output};
${<else}
		${e.Output.Param.Type.Primitive} __expected[] = new ${e.Output.Param.Type} {${foreach e.Output.ValueList v ,}
			${v}${end}
		};
${<end}
	
		${Method.ReturnType} __result = new ${ClassName}().${Method.Name}(${foreach e.Input in , }${in.Param.Name}${end});

${<if !Method.ReturnType.RealNumber}
${<if Method.ReturnType.Array}
		Assert.assertArrayEquals(__expected, __result);
${<else}
		Assert.assertEquals(__expected, __result);
${<end}
${<else}
${<if Method.ReturnType.Array}
		assertTcFloatArrayEquals(__expected, __result);
${<else}
		assertTcFloatEquals(__expected, __result);
${<end}
${<end}
	}

${<end}
}
