# Code
test {
    outputKey = TestCode
    transformers = [ empty-block, cont-blank-line ]
}
filetest {
    outputKey = TestCode
    transformers = [ empty-block, cont-blank-line ]
    dependencies = [ testcase ]
    options {
        runMultipleProcesses = false
    }
}
source {
    overwrite = skip
    outputFileName = "${Problem.Name}"
    transformers = [ empty-block, cont-blank-line ]
    dependencies = [ key(TestCode) | unittest ]
}
unittest {
    overwrite = skip
    templateFile = None
    outputFileName = "${Problem.Name}Test"
    transformers = [ empty-block, cont-blank-line ]
}
testcase {
    overwrite = skip
    outputFile = "${Problem.Name}.sample"
    templateFile = builtin(testcase/testcases.tmpl)
}

# Problem description
problem-desc {
    overwrite = force
    outputFile = "${Problem.Name}.html"
    templateFile = builtin(problem/desc.html.tmpl)
    dependencies = [
        problem-desc-styles,
        problem-desc-theme-light,
        problem-desc-theme-dark,
        problem-desc-theme-blue,
        problem-desc-theme-darkgray
    ]
    options {
        # Set theme to [ light, dark, blue, darkgray ]
        theme              = darkgray
        # shows String[]s with rectangular dimensions as a grid.
        gridArrays         = true
        # Show problem definition (false, cpp, java, python...)
        # In default.conf each language template definition sets this setting to its own by default
        showDefinition     = java
        # The favicon, by default we use topcoder's, set to false to disable it.
        favIcon            = "http://www.topcoder.com/i/favicon.ico"
        # A custom CSS. When set to false, it does nothing.
        # If set to a .css path (Example: "../statement.css", it will call that external style sheet.
        customStyle        = false
        # disable all CSS that is added by default, using only the custom style specified by customStyle.
        noDefaultStyle     = false
    }
}
problem-desc-styles         { templateFile = builtin(problem/default.css) }
problem-desc-theme-light    { templateFile = builtin(problem/light.theme.css) }
problem-desc-theme-dark     { templateFile = builtin(problem/dark.theme.css) }
problem-desc-theme-blue     { templateFile = builtin(problem/blue.theme.css) }
problem-desc-theme-darkgray { templateFile = builtin(problem/darkgray.theme.css) }

# Dualcolor tester
dualcolor-test {
    outputKey = TestCode
    templateFile = None
    transformers = [ empty-block, cont-blank-line ]
    dependencies = [ dualcolor-tester ]
    options {
        compactMode          = COMPACT_REPORT
        # example: localTestTimeFactor = "0.5"
        # halves the execution time per test case.
        localTestTimeFactor  = false
        singleFile           = false
        disableColors        = false
        customTesterLocation = false
        #(c++ only)
        runMultipleProcesses = true
    }
}
dualcolor-tester {
    overwrite = skip
    outputFileName = "tester"
    outputFileExtension = None
    templateFile = None
    transformers = [ empty-block, cont-blank-line ]
}
